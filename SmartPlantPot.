// Khai báo thông tin cấu hình Blynk
#define BLYNK_TEMPLATE_ID "TMPL6wKNtCWZG"
#define BLYNK_TEMPLATE_NAME "Smart Plant Pot"
#define BLYNK_AUTH_TOKEN "odZkXdRoUMBsHJ2KAJF6HJUTiZUaevKn"

// Thư viện cần thiết cho các chức năng
#include <Arduino.h>
#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#include <SPI.h>
#include <Preferences.h>
#include <BluetoothSerial.h>
#include <nvs_flash.h>
#include <BH1750.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// Thư viện BLE
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>

// Khai báo chân ảo Blynk
#define VIRTUAL_TEMP V0
#define VIRTUAL_HUMID V1
#define VIRTUAL_MOIST V2
#define VIRTUAL_LED V3
#define VIRTUAL_PUMP V4
#define VIRTUAL_LIGHT V5

// Khai báo chân phần cứng
#define LED_PIN 26
#define DHTPIN 5
#define DHTTYPE DHT11
#define PUMP_PIN 18
const int moisturePin = 34; // Cảm biến độ ẩm đất

// Khởi tạo các đối tượng cảm biến
LiquidCrystal_I2C lcd(0x27, 16, 2); // Màn hình LCD I2C
DHT dht(DHTPIN, DHTTYPE);           // Cảm biến DHT11
BH1750 lightMeter(0x23);            // Cảm biến ánh sáng

// ===== Cấu hình BLE =====
BLECharacteristic *pBLECharacteristic;
std::string bleStatus = "⏳ Đang chờ dữ liệu từ BLE...";
bool newBLEDataReceived = false;
String bleReceivedData = "";
bool wifiReady = false;

// Lớp xử lý sự kiện BLE khi có thiết bị gửi dữ liệu
class BLECallback : public BLECharacteristicCallbacks {
  void onWrite(BLECharacteristic *pCharacteristic) override {
    std::string value = pCharacteristic->getValue();
    if (value.length() > 0) {
      bleReceivedData = String(value.c_str());
      bleReceivedData.trim();
      newBLEDataReceived = true;

      // Phản hồi lại trạng thái kết nối BLE
      pCharacteristic->setValue(bleStatus);
      pCharacteristic->notify();
    }
  }

  void onRead(BLECharacteristic *pCharacteristic) override {
    pCharacteristic->setValue(bleStatus);
  }
};

// Hàm thiết lập BLE
void setupBLE() {
  BLEDevice::init("SmartPlantPot");
  BLEServer *pServer = BLEDevice::createServer();
  BLEService *pService = pServer->createService("12345678-1234-1234-1234-1234567890ab");

  // Tạo đặc điểm BLE để nhận/gửi dữ liệu
  pBLECharacteristic = pService->createCharacteristic(
    "abcdefab-1234-5678-90ab-abcdefabcdef",
    BLECharacteristic::PROPERTY_WRITE |
    BLECharacteristic::PROPERTY_READ |
    BLECharacteristic::PROPERTY_NOTIFY
  );

  pBLECharacteristic->setCallbacks(new BLECallback());
  pService->start();
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->start();
}

// Biến lưu thông tin WiFi nhận qua BLE
String ssid_input = "";
String password_input = "";

// Hàm kết nối WiFi
void setup_wifi() {
  WiFi.begin(ssid_input.c_str(), password_input.c_str());
  int retry = 0;
  while (WiFi.status() != WL_CONNECTED && retry < 20) {
    delay(500);
    retry++;
  }

  // Gửi trạng thái kết nối WiFi qua BLE
  if (WiFi.status() == WL_CONNECTED) {
    wifiReady = true;
    bleStatus = "✅ Kết nối WiFi thành công!";
  } else {
    bleStatus = "❌ Kết nối WiFi thất bại!";
  }

  pBLECharacteristic->setValue(bleStatus);
  pBLECharacteristic->notify();
}

// Xử lý khi người dùng điều khiển máy bơm trên app Blynk
BLYNK_WRITE(VIRTUAL_PUMP) {
  int pumpState = param.asInt();
  digitalWrite(PUMP_PIN, pumpState);
}

// Thiết lập ban đầu
void setup() {
  Serial.begin(115200);
  lcd.begin(16, 2);
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Khoi dong...");

  SPI.begin();
  setupBLE();        // Khởi động BLE
  setup_wifi();      // Kết nối WiFi
  dht.begin();       // Bắt đầu cảm biến DHT11
  Wire.begin();      // Khởi động I2C
  lightMeter.begin();// Bắt đầu cảm biến ánh sáng

  // Cấu hình chân xuất
  pinMode(LED_PIN, OUTPUT);
  pinMode(PUMP_PIN, OUTPUT);
}

// Vòng lặp chính
void loop() {
  // Nếu chưa kết nối WiFi và nhận được dữ liệu từ BLE thì tiến hành kết nối
  if (!wifiReady && newBLEDataReceived) {
    if (bleReceivedData.indexOf(',') != -1) {
      int splitIndex = bleReceivedData.indexOf(',');
      ssid_input = bleReceivedData.substring(0, splitIndex);
      password_input = bleReceivedData.substring(splitIndex + 1);
      ssid_input.trim();
      password_input.trim();

      setup_wifi(); // Thử kết nối
      if (wifiReady) {
        Blynk.begin(BLYNK_AUTH_TOKEN, ssid_input.c_str(), password_input.c_str());
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("WiFi OK. Blynk on");
        delay(1000);
      }
    }
  }

  Blynk.run(); // Chạy tiến trình Blynk

  // Đọc dữ liệu từ các cảm biến
  int temperature = dht.readTemperature();
  int humidity = dht.readHumidity();
  int soilMoistureValue = analogRead(moisturePin);
  int moisture = map(soilMoistureValue, 4095, 0, 0, 100); // Quy đổi về %
  float lux = lightMeter.readLightLevel();

  // Gửi dữ liệu cảm biến lên Blynk
  Blynk.virtualWrite(VIRTUAL_TEMP, temperature);
  Blynk.virtualWrite(VIRTUAL_HUMID, humidity);
  Blynk.virtualWrite(VIRTUAL_MOIST, moisture);
  Blynk.virtualWrite(VIRTUAL_LIGHT, lux);

  // Tự động điều khiển máy bơm
  if (moisture <= 30) {
    digitalWrite(PUMP_PIN, HIGH);
    Blynk.virtualWrite(VIRTUAL_PUMP, 1);
  } else if (moisture > 45) {
    digitalWrite(PUMP_PIN, LOW);
    Blynk.virtualWrite(VIRTUAL_PUMP, 0);
  }

  // Tự động điều khiển LED theo ánh sáng
  if (lux < 50) {
    digitalWrite(LED_PIN, HIGH);
    Blynk.virtualWrite(VIRTUAL_LED, 1);
  } else {
    digitalWrite(LED_PIN, LOW);
    Blynk.virtualWrite(VIRTUAL_LED, 0);
  }

  // ===== Hiển thị LCD luân phiên =====

  // Hiển thị nhiệt độ và độ ẩm không khí
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Nhiet: "); lcd.print(temperature); lcd.print("C");
  lcd.setCursor(0, 1);
  lcd.print("Do am: "); lcd.print(humidity); lcd.print("%");
  delay(2500);

  // Hiển thị độ ẩm đất
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Do am dat: ");
  lcd.setCursor(0, 1);
  lcd.print(moisture); lcd.print(" %");
  delay(2500);

  // Hiển thị cường độ ánh sáng
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Anh sang: ");
  lcd.setCursor(0, 1);
  lcd.print((int)lux); lcd.print(" lux");
  delay(2500);

  // Hiển thị trạng thái WiFi
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("WiFi: ");
  if (WiFi.status() == WL_CONNECTED) {
    lcd.print("OK");
    lcd.setCursor(0, 1);
    lcd.print(WiFi.localIP());
  } else {
    lcd.print("FAIL");
    lcd.setCursor(0, 1);
    lcd.print("Dang ket noi...");
  }
  delay(2500);

  // === Điều khiển thủ công qua Serial Monitor ===
  if (Serial.available()) {
    char cmd = Serial.read();
    if (cmd == '1') {
      digitalWrite(PUMP_PIN, HIGH);
      Blynk.virtualWrite(VIRTUAL_PUMP, 1);
    } else if (cmd == '0') {
      digitalWrite(PUMP_PIN, LOW);
      Blynk.virtualWrite(VIRTUAL_PUMP, 0);
    }
  }
}
